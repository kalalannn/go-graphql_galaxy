package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"go-graphql_galaxy/internal/graphql/models"
	"go-graphql_galaxy/internal/transformers"
)

// CharactersCount is the resolver for the characters_count field.
func (r *queryResolver) CharactersCount(ctx context.Context) (int64, error) {
	return r.CharacterService.CharactersCount(), nil
}

// Characters is the resolver for the characters field.
func (r *queryResolver) Characters(ctx context.Context, orderBy *models.CharacterOrderBy) ([]*models.Character, error) {
	characterEntities, err := r.CharacterService.Characters(
		GetPreloads(ctx),
		OrderBy(orderBy.Field.String(), orderBy.Direction.String()),
	)
	if err != nil {
		return nil, err //! check business error
	}
	return transformers.TransformCharacterEntitiesToModels(characterEntities), nil
}

// Character is the resolver for the character field.
func (r *queryResolver) Character(ctx context.Context, id uint) (*models.Character, error) {
	characterEntity, err := r.CharacterService.Character(id, GetPreloads(ctx))
	if err != nil {
		return nil, err //! check business error
	}
	return transformers.TransformCharacterEntityToModel(characterEntity), nil
}

// AverageAge is the resolver for the average_age field.
func (r *queryResolver) AverageAge(ctx context.Context) (float64, error) {
	return transformers.RoundFloat(r.CharacterService.AverageAge(), 2), nil
}

// AverageWeight is the resolver for the average_weight field.
func (r *queryResolver) AverageWeight(ctx context.Context) (float64, error) {
	return transformers.RoundFloat(r.CharacterService.AverageWeight(), 2), nil
}

// AverageBeerConsumption is the resolver for the average_beer_consumption field.
func (r *queryResolver) AverageBeerConsumption(ctx context.Context) (float64, error) {
	return transformers.RoundFloat(r.CharacterService.AverageBeerConsumption(), 2), nil
}

// Genders is the resolver for the genders field.
func (r *queryResolver) Genders(ctx context.Context) (*models.Genders, error) {
	genders := r.CharacterService.Genders()
	return &models.Genders{
		Male:   genders.Male,
		Female: genders.Female,
		Other:  genders.Other,
	}, nil
}
