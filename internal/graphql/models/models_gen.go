// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type AliveNemeses struct {
	Alive int64 `json:"alive"`
	Dead  int64 `json:"dead"`
}

type Character struct {
	ID              uint       `json:"id"`
	Name            string     `json:"name"`
	Gender          *string    `json:"gender,omitempty"`
	Ability         string     `json:"ability"`
	MinimalDistance float64    `json:"minimal_distance"`
	Weight          *float64   `json:"weight,omitempty"`
	Born            string     `json:"born"`
	InSpaceSince    *string    `json:"in_space_since,omitempty"`
	BeerConsumption int32      `json:"beer_consumption"`
	KnowsTheAnswer  bool       `json:"knows_the_answer"`
	Nemeses         []*Nemesis `json:"nemeses"`
}

type CharacterOrderBy struct {
	Field     CharacterOrderByField `json:"field"`
	Direction OrderByDirection      `json:"direction"`
}

type Genders struct {
	Male   int64 `json:"male"`
	Female int64 `json:"female"`
	Other  int64 `json:"other"`
}

type Nemesis struct {
	ID        uint       `json:"id"`
	IsAlive   bool       `json:"is_alive"`
	Years     *int32     `json:"years,omitempty"`
	Character *Character `json:"character"`
	Secrets   []*Secret  `json:"secrets"`
}

type NemesisOrderBy struct {
	Field     NemesisOrderByField `json:"field"`
	Direction OrderByDirection    `json:"direction"`
}

type PaginationInput struct {
	Limit  *int32 `json:"limit,omitempty"`
	Offset *int32 `json:"offset,omitempty"`
}

type Query struct {
}

type Secret struct {
	ID         uint     `json:"id"`
	SecretCode int64    `json:"secret_code"`
	Nemesis    *Nemesis `json:"nemesis"`
}

type SecretOrderBy struct {
	Field     SecretOrderByField `json:"field"`
	Direction OrderByDirection   `json:"direction"`
}

type CharacterOrderByField string

const (
	CharacterOrderByFieldID              CharacterOrderByField = "id"
	CharacterOrderByFieldName            CharacterOrderByField = "name"
	CharacterOrderByFieldBorn            CharacterOrderByField = "born"
	CharacterOrderByFieldBeerConsumption CharacterOrderByField = "beer_consumption"
)

var AllCharacterOrderByField = []CharacterOrderByField{
	CharacterOrderByFieldID,
	CharacterOrderByFieldName,
	CharacterOrderByFieldBorn,
	CharacterOrderByFieldBeerConsumption,
}

func (e CharacterOrderByField) IsValid() bool {
	switch e {
	case CharacterOrderByFieldID, CharacterOrderByFieldName, CharacterOrderByFieldBorn, CharacterOrderByFieldBeerConsumption:
		return true
	}
	return false
}

func (e CharacterOrderByField) String() string {
	return string(e)
}

func (e *CharacterOrderByField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CharacterOrderByField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CharacterOrderByField", str)
	}
	return nil
}

func (e CharacterOrderByField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NemesisOrderByField string

const (
	NemesisOrderByFieldID    NemesisOrderByField = "id"
	NemesisOrderByFieldYears NemesisOrderByField = "years"
)

var AllNemesisOrderByField = []NemesisOrderByField{
	NemesisOrderByFieldID,
	NemesisOrderByFieldYears,
}

func (e NemesisOrderByField) IsValid() bool {
	switch e {
	case NemesisOrderByFieldID, NemesisOrderByFieldYears:
		return true
	}
	return false
}

func (e NemesisOrderByField) String() string {
	return string(e)
}

func (e *NemesisOrderByField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NemesisOrderByField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NemesisOrderByField", str)
	}
	return nil
}

func (e NemesisOrderByField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderByDirection string

const (
	OrderByDirectionAsc  OrderByDirection = "ASC"
	OrderByDirectionDesc OrderByDirection = "DESC"
)

var AllOrderByDirection = []OrderByDirection{
	OrderByDirectionAsc,
	OrderByDirectionDesc,
}

func (e OrderByDirection) IsValid() bool {
	switch e {
	case OrderByDirectionAsc, OrderByDirectionDesc:
		return true
	}
	return false
}

func (e OrderByDirection) String() string {
	return string(e)
}

func (e *OrderByDirection) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderByDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderByDirection", str)
	}
	return nil
}

func (e OrderByDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SecretOrderByField string

const (
	SecretOrderByFieldID         SecretOrderByField = "id"
	SecretOrderByFieldSecretCode SecretOrderByField = "secret_code"
)

var AllSecretOrderByField = []SecretOrderByField{
	SecretOrderByFieldID,
	SecretOrderByFieldSecretCode,
}

func (e SecretOrderByField) IsValid() bool {
	switch e {
	case SecretOrderByFieldID, SecretOrderByFieldSecretCode:
		return true
	}
	return false
}

func (e SecretOrderByField) String() string {
	return string(e)
}

func (e *SecretOrderByField) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SecretOrderByField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SecretOrderByField", str)
	}
	return nil
}

func (e SecretOrderByField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
